version: '3.8'

services:
  # Service 1: PostgreSQL Database
  database:
    image: postgres:16-alpine
    container_name: ticketing_db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres_secure_password_2024
      POSTGRES_DB: ticketing_system
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql:ro
    ports:
      - "5432:5432"
    networks:
      - ticketing_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Service 2: Next.js App (Frontend + Backend)
  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: ticketing_app
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      # Database Configuration
      DB_HOST: database
      DB_PORT: 5432
      DB_NAME: ticketing_system
      DB_USER: postgres
      DB_PASSWORD: postgres_secure_password_2024
      
      # JWT Configuration
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production-2024
      JWT_EXPIRES_IN: 7d
      
      # Application Configuration
      NODE_ENV: production
      PORT: 3000
      NEXT_PUBLIC_API_URL: http://localhost:3000
    volumes:
      - ./public/uploads:/app/public/uploads
    networks:
      - ticketing_network
    depends_on:
      database:
        condition: service_healthy
    command: >
      sh -c "
        echo 'Waiting for database to be ready...' &&
        sleep 5 &&
        echo 'Running database initialization...' &&
        node scripts/init-db.js || true &&
        echo 'Starting application...' &&
        node server.js
      "

networks:
  ticketing_network:
    driver: bridge

volumes:
  postgres_data:
    driver: local

